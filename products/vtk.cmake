# In order to retrieve a tag, we must string together two git commands, which requires calling the system shell
SET(PRODUCT_REPO "https://github.com/Kitware/VTK.git")
SET(PRODUCT_BRANCH "${IN_BRANCH}")

IF(UNIX)
  SET(PRODUCT_CHECKOUT_COMMAND 
    "sh -c \"${GIT_BINARY} clone ${PRODUCT_REPO} ${IN_PRODUCT} && cd ${IN_PRODUCT} && ${GIT_BINARY} checkout ${PRODUCT_BRANCH}\"")
ELSEIF(WIN32)
  SET(PRODUCT_CHECKOUT_COMMAND 
      "\"${GIT_BINARY}\" clone -b ${IN_BRANCH} ${PRODUCT_REPO} ${IN_PRODUCT}")
ENDIF(UNIX)

SET(PRODUCT_EXTERNAL ON)

CACHE_ADD("BUILD_TESTING:BOOL=FALSE")
CACHE_ADD("BUILD_EXAMPLES:BOOL=FALSE")
CACHE_ADD("BUILD_SHARED_LIBS:BOOL=FALSE")
CACHE_ADD("VTK_REQUIRED_OBJCXX_FLAGS:STRING=")

SETCOND(NEED_QT6 ON BRANCH "9.*")
CACHE_ADD("VTK_GROUP_ENABLE_Qt:STRING=YES" BRANCH "9.*")
CACHE_ADD("VTK_MODULE_ENABLE_VTK_GUISupportQtQuick:STRING=NO" BRANCH "9.*")
CACHE_ADD("VTK_MODULE_ENABLE_VTK_GUISupportQtSQL:STRING=NO" BRANCH "9.*")
CACHE_ADD("VTK_MODULE_ENABLE_VTK_RenderingExternal:STRING=WANT" BRANCH "9.*")

# Skip special qt4 builds
IF(${CONFIG_EXT} MATCHES ".*qt4.*")
  SET(SKIP_BUILD ON)
ENDIF(${CONFIG_EXT} MATCHES ".*qt4.*")

# Enable OSMESA builds
IF(${CONFIG_EXT} MATCHES ".*osmesa.*")
  SETCOND(SKIP_BUILD ON BRANCH "v6.*")
  CACHE_ADD("VTK_USE_X:BOOL=FALSE")
  CACHE_ADD("VTK_OPENGL_HAS_OSMESA:BOOL=TRUE")
ENDIF()

# Set max/min GCC version
IF(${IN_BRANCH} MATCHES "6.*")
  SET(GCC_MAX "7")
ENDIF()
